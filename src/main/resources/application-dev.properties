grpc_port=8000

###################################
## Producer configuration
##################################
spring.kafka.producer.bootstrap.servers=localhost:9092,localhost:9093,localhost:9094
spring.kafka.producer.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.schema_registry_url=http://localhost:8081
spring.kafka.producer.enable.idempotence=true
spring.kafka.producer.transactional.id=server1
spring.kafka.producer.transactional_id_prefix=transactionServer1
spring.kafka.producer.transaction.timeout.ms=100

#spring.cloud.stream.bindings.input.destination=t1

###################################
## Consumer Configuration
##################################
#spring.cloud.stream.kafka.binder.defaultBrokerPort=localhost:9092,localhost:9093,localhost:9094
#spring.cloud.stream.bindings.rules_topic.destination=t1
#spring.cloud.stream.kafka.bindings.input.consumer.autoCommitOffset=false
#spring.cloud.stream.bindings.input.group=roles-topic
#spring.cloud.stream.kafka.streams.binder.applicationId=testAppp
#spring.cloud.stream.kafka.streams.binder.serdeError: logAndContinue
#spring.cloud.stream.kafka.streams.binder.configuration.default.schema.registry.url=http://localhost:8081
#spring.cloud.stream.kafka.streams.binder.configuration.default.key.serializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.cloud.stream.kafka.streams.binder.configuration.default.value.serializer=io.confluent.kafka.serializers.KafkaAvroDeserializer

#spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
#spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
#spring.cloud.stream.bindings.output.nativeEncoding: true
#spring.cloud.stream.bindings.input.nativeDecoding: true
#spring.cloud.stream.kafka.streams.bindings.rules_topic.consumer.valueSerde=org.apache.kafka.common.serialization.Serdes$StringSerde
#spring.cloud.stream.bindings.output.nativeEncoding: true


###################################
## General Configuration
##################################
#debug=true
avro.schema.name=avroSchema

# The below configuration is used for conditional annotation. This will be helpful
# for unit testing.
consumerBinding=true
producerBinding=true

#spring.kafka.consumer.bootstrap-servers=localhost:9092,localhost:9093,localhost:9094
#spring.kafka.consumer.default_key_serde=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.consumer.default_value_serde=io.confluent.kafka.serializers.KafkaAvroSerializer
#spring.kafka.consumer.schema_registry_url=http://localhost:8081
#spring.kafka.consumer.application_id=server1
#spring.kafka.consumer.group_id=group-1
#spring.kafka.consumer.enable_auto_commit=false
#spring.kafka.consumer.isolation_level=read_committed